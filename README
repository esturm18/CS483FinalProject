Name: Emma Sturm
Date: 03/30/2025
Project: Part 1 Final

Project Overview:
    The purpose of this project is to implement ThoughtStream, a digital diary that saves entries for different users. The purpose of creating ThoughtStream is so that I can learn different frameworks and how the backend interacts with the frontend. Additionally, the purpose of ThoughtStream is to enable users to have a safe and secure way of writing their deep dark secrets. 


Setup Instructions:
    To prepare to use ThoughStream, here are some dependencies you need to install for your machine: 
        - Install Node.js and npm from website https://nodejs.org/en
        - Initialize project by creating a directory for it, i.e. diary app, and then  setting up project in the directory by entering "npm init -y"
        - Dependencies to install = express, mongoose, dotenv, cors ad axios. To install these, enter this into the command line "npm install express mongoose dotenv cors axios" 
        - Download MongoDB and Postman if you do not already have it. 
        - Optional dependency: nodemon
        - Also install mongoose by entering in "npm install mongoose" onto the terminal
    To start your server: open up a terminal. Type in "npm run dev" to start the server if you downloaded nodemon, "npm start" if you did not. 


API Usage Guide: 
    -Available API Endpoints:
        POST /api/diary --This creates an diary entry
        GET /api/diary/:id --This returns an diary entry by id
            Can also search by doing GET /api/diary?location=cityName
            OR by doing GET /api/diary?search=Banana (looks for keywords)
            OR by doing GET /api/diary?search=Banana&location=Tokyo (combine filters)
        PUT /api/diary/:id --This updates an diary entry
        DELETE /api/diary/:id --This deletes an diary entry

    -Example requests and responses (success and error cases)
        For POST: Valid JSON
            POST http://localhost:5000/api/diary
            Example entry json into Postman: 
                {
                    "user": "123",
                    "title": "Rainy days",
                    "content": "It rained all day, but I stayed cozy inside.",
                    "reflection": "I enjoyed the calmness of the rain",
                    "location": "Forks, US",
                    "tags": ["rain", "cold"]
                }


            Output: 
                {
                    "user": "123",
                    "title": "Rainy days",
                    "content": "It rained all day, but I stayed cozy inside.",
                    "reflection": "I enjoyed the calmness of the rain",
                    "location": "Forks, US",
                    "tags": [
                        "rain",
                        "cold"
                    ],
                    "weather": {
                        "condition": "scattered clouds",
                        "temperature": 45.91,
                        "location": "Forks, US"
                    },
                    "_id": "67edefd49cebdb194bb4e6a3",
                    "createdAt": "2025-04-03T02:17:56.159Z",
                    "updatedAt": "2025-04-03T02:17:56.159Z",
                    "__v": 0
                }
                Return Code: 201 (Entry was successfully created)


        For POST: Invalid JSON, missing "title" 
            POST http://localhost:5000/api/diary
            {
                "user": "123",
                "content": "It rained all day, but I stayed cozy inside.",
                "reflection": "I enjoyed the calmness of the rain",
                "location": "Forks, US",
                "tags": ["rain", "cold"]
            }

            Output:
            {
                "message": "Title, user, content, and location are required."
            }   

            Returned Error Code: 400 (Bad Request)

        For GET: Valid Search
            GET http://localhost:5000/api/diary/67edefd49cebdb194bb4e6a3

            Output: 
                {
                    "user": "123",
                    "title": "Rainy days",
                    "content": "It rained all day, but I stayed cozy inside.",
                    "reflection": "I enjoyed the calmness of the rain",
                    "location": "Forks, US",
                    "tags": [
                        "rain",
                        "cold"
                    ],
                    "weather": {
                        "condition": "scattered clouds",
                        "temperature": 45.91,
                        "location": "Forks, US"
                    },
                    "_id": "67edefd49cebdb194bb4e6a3",
                    "createdAt": "2025-04-03T02:17:56.159Z",
                    "updatedAt": "2025-04-03T02:17:56.159Z",
                    "__v": 0
                }

            Returned Code: 200 (OK - Request was successful)

        For GET: Invalid Search by ID (bad id)
            http://localhost:5000/api/diary/67e88c1c8219c6b7508103630000

            Output:
            {
                "message": "Server Error: Unable to retrieve diary entry"
            }

            Returned Code: 404 (Not Found)

        For PUT: Valid Update 
            PUT http://localhost:5000/api/diary/67e98f8e823059b888e961ff
        
            Before: 
            {
                "user": "123",
                "title": "Rainy days",
                "content": "It rained all day, but I stayed cozy inside.",
                "reflection": "I enjoyed the calmness of the rain",
                "location": "Forks, US",
                "tags": [
                    "rain",
                    "cold"
                ],
                "weather": {
                    "condition": "scattered clouds",
                    "temperature": 45.91,
                    "location": "Forks, US"
                },
                "_id": "67edefd49cebdb194bb4e6a3",
                "createdAt": "2025-04-03T02:17:56.159Z",
                "updatedAt": "2025-04-03T02:17:56.159Z",
                "__v": 0
            }
           

            Input: 
            {
                "location": "Boston, US"
            }

            Output: 
            {
                "weather": {
                "condition": "moderate rain",
                "temperature": 38.05,
                "location": "Boston, US"
            },
                "_id": "67edefd49cebdb194bb4e6a3",
                "user": "123",
                "title": "Rainy days",
                "content": "It rained all day, but I stayed cozy inside.",
                "reflection": "I enjoyed the calmness of the rain",
                "location": "Boston, US",
                "tags": [
                    "rain",
                    "cold"
                ],
                "createdAt": "2025-04-03T02:17:56.159Z",
                "updatedAt": "2025-04-03T02:30:43.469Z",
                "__v": 0
            }

            Returned Code: 200

        FOR DELETE: Valid
            DELETE http://localhost:5000/api/diary/67edefd49cebdb194bb4e6a3 

            Output: 
            {
                "message": "Diary entry deleted successfully"
            }

            Returned Code: 200

        FOR DELETE: InValid (Trying to delete the above entry that was already deleted):

            Output: 
            {
                "message": "Diary entry not found"
            } 

            Returned Code: 404 


Environment Variables:
    Needed for Part1: 
    -MONGO_URI=mongodb://localhost:27017/diaryApp

    Needed for other Parts, I'm assuming = 
    MONGO_URI=mongodb+srv://<username>:<password>@cluster0.mongodb.net/diary-app
    PORT=5000
    JWT_SECRET=<your_jwt_secret>
    GOOGLE_CLIENT_ID=<your_google_client_id>
    GOOGLE_CLIENT_SECRET=<your_google_client_secret>

Common Issues & Debugging:
    -Could not get User field to populate, would run into errors on Postman. 
     I am not sure if this is because there is supposed to be Middleware code? However, this step was not included in the guide. I simply changed the user code to just accept a string, and then my code seemed to work fine on Postman, otherwise it would not because it wasn't populating the user field correctly (without the middleware)."User" currently just requires a temporary placeholder. 
     -Other issues: none

    -Debugging Tips: Put print statements where need be so you can see what is happening as your code progresses and use Postman to see error code results.

API Testing Results:
    -Photos are saved under the SamplePhotos Folder. Photos are laveled with what test was conducted. 


Git Commit History: 
    https://github.com/esturm18/CS483FinalProject
    